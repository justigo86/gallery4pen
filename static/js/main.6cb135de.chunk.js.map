{"version":3,"sources":["firebase/firebase_config.js","components/UploadForm.js","firebase/firestore.js","components/Gallery.js","components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","storage","firestore","timestamp","FieldValue","serverTimestamp","Form","styled","form","Input","input","FormLabel","label","UploadForm","useState","images","setImages","setFile","error","setError","filetypes","setProgress","setUrl","useEffect","map","image","storageRef","ref","name","put","collectionRef","collection","on","snapshot","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","then","url","createdAt","add","desc","prevState","type","multiple","onChange","e","i","target","files","includes","length","className","useFirestore","docs","setDocs","unmount","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImgGallery","div","DeleteBtn","FavBtn","ContainerImg","img","ImgContainer","Gallery","currentImg","setCurrentImg","setToggle","as","motion","onClick","layout","stopPropagation","delete","icon","faTimesCircle","replace","style","color","background","console","log","toggle","faHeart","src","alt","initial","opacity","animate","transition","delay","OverlayContainer","Overlay","OverlayImg","Modal","currentIndex","prevSlide","idx","indexOf","nextSlide","handleKeyDown","keyCode","window","addEventListener","removeEventListener","classList","contains","options","max","rotate","scale","stiffness","damping","faArrowAltCircleRight","faArrowAltCircleLeft","Title","h1","Body","particlesOptions","particles","number","value","density","enable","polygon","nb_sides","size","random","move","direction","out_mode","bounce","line_linked","App","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8PAiBEA,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,8BACZC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjBR,IAASS,YAET,I,0BAAMC,EAAUV,IAASU,UACnBC,EAAYX,IAASW,YACrBC,EAAYZ,IAASW,UAAUE,WAAWC,gB,QChB5CC,EAAOC,IAAOC,KAAV,6EAIJC,EAAQF,IAAOG,MAAV,gFAKLC,EAAYJ,IAAOK,MAAV,yVAkGAC,EAjFI,WACf,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0BF,mBAAS,MAAnC,mBAAcG,GAAd,WACA,EAA4BH,mBAAS,MAArC,mBAAQI,EAAR,KAAeC,EAAf,KACMC,EAAY,CAAC,YAAa,aAAc,aAC9C,EAAkCN,mBAAS,GAA3C,mBAAkBO,GAAlB,WACA,EAAwBP,mBAAS,IAAjC,mBAAaQ,GAAb,WA0DA,OAtCAC,qBAAU,WAENR,EAAOS,KAAI,SAACC,GAGR,IAAMC,EAAazB,EAAQ0B,IAAIF,EAAMG,MAAMC,IAAIJ,GAKzCK,EAAgB5B,EAAU6B,WAAW,UAE3CL,EAAWM,GAAG,iBAAiB,SAACC,GAE5B,IAAIC,EAAcD,EAASE,iBAAmBF,EAASG,WAAc,IACrEf,EAAYa,MACb,SAACG,GAEAlB,EAASkB,KANb,sBAOG,sBAAAC,EAAA,sEAEOrC,EACD0B,IAAIF,EAAMG,MACVW,iBAEAC,MAAK,SAACC,GACH,IACMC,EAAYvC,IAClB2B,EAAca,IAAK,CAAEF,MAAKC,YAAWE,KAFxB,iBAIbtB,GAAO,SAACuB,GAAD,4BAAmBA,GAAnB,CAA8BJ,UAX9C,4CAePzB,EAAU,SAEX,CAACD,IAIA,cADA,CACCT,EAAD,WACI,eAACK,EAAD,wBAEI,cAACF,EAAD,CAAOqC,KAAK,OAAOC,UAAQ,EAACC,SA7DtB,SAACC,GAGf,IAHsB,IAAD,WAGZC,GACL,IAAInC,EAASkC,EAAEE,OAAOC,MAAMF,GAC5BlC,GAAU,SAAC6B,GAAD,4BAAmBA,GAAnB,CAA8B9B,OAEpCA,GAAUK,EAAUiC,SAAStC,EAAO+B,OACpC7B,EAAQF,GACRI,EAAS,MAETF,EAAQ,MACRE,EAAS,0CATR+B,EAAI,EAAGA,EAAID,EAAEE,OAAOC,MAAME,OAAQJ,IAAM,EAAxCA,SA4DL,qBAAKK,UAAU,UAAf,SAIKrC,GAAS,oCAAOA,EAAP,a,QCrFXsC,EAlBM,SAACzB,GAClB,MAA0BjB,mBAAS,IAAnC,mBAAQ2C,EAAR,KAAcC,EAAd,KACMC,EAAUpC,qBAAU,WAWtB,OAVArB,EAAU6B,WAAWA,GACpB6B,QAAQ,YAAa,QACrBC,YAAW,SAAC5B,GACT,IAAI6B,EAAY,GAChB7B,EAAS8B,SAAQ,SAAAC,GACbF,EAAUG,KAAV,2BAAmBD,EAAIE,QAAvB,IACAC,GAAIH,EAAIG,SAEZT,EAAQI,MAEL,kBAAMH,KACd,CAAC5B,IACJ,MAAO,CAAE0B,S,yBCXPW,EAAa7D,IAAO8D,IAAV,sEAIVC,EAAY/D,IAAO+B,EAAV,oSAeTiC,EAAShE,IAAO+B,EAAV,4SAeNkC,EAAejE,IAAOkE,IAAV,wZAkBZC,EAAenE,IAAO8D,IAAV,qfAiBJC,EAIAC,GAgECI,EA1DC,SAAC,GAAmC,EAAhCC,WAAiC,IAArBC,EAAoB,EAApBA,cACpBpB,EAASD,EAAa,UAAtBC,KACR,EAA4B3C,oBAAS,GAArC,mBAAegE,GAAf,WAYA,OAGI,aAFA,CAECV,EAAD,UACMX,GAAQA,EAAKjC,KAAI,SAAAwC,GAAG,OAClB,eAACU,EAAD,CAAcK,GAAIC,IAAOX,IAEzBY,QAAS,WACLJ,EAAcb,EAAIvB,MAEtByC,QAAM,EALN,UAMI,cAACZ,EAAD,CAAWW,QAAS,SAAChC,GACjBA,EAAEkC,kBACFjF,EAAU6B,WAAW,UAAUiC,IAAIA,EAAIG,IAAIiB,UAF/C,SAII,cAAC,IAAD,CAAiBC,KAAMC,QAE3B,cAACf,EAAD,CAAQU,QAAS,SAAChC,GACdA,EAAEkC,kBAEEnB,EAAIpB,KAAKS,SAAS,SAClBW,EAAIpB,KAAOoB,EAAIpB,KAAK2C,QAAQ,OAAQ,IACpCtC,EAAEE,OAAOqC,MAAMC,MAAQ,UAEvBzB,EAAIpB,MAAQ,OACZK,EAAEE,OAAOqC,MAAME,WAAa,MAC5BzC,EAAEE,OAAOqC,MAAMC,MAAQ,OAE3BE,QAAQC,IAAI5B,EAAIpB,OAGhBiD,OAAQf,EAdZ,SAeI,cAAC,IAAD,CAAiBO,KAAMS,QAE3B,cAACtB,EAAD,CAAcO,GAAIC,IAAOP,IAAKsB,IAAK/B,EAAIvB,IAAKuD,IAAI,4BAChDC,QAAU,CAAEC,QAAS,GACrBC,QAAU,CAAED,QAAS,GACrBE,WAAa,CAAEC,MAAO,OA/BrBrC,EAAIG,U,kBCnGnBmC,EAAmB/F,IAAO8D,IAAV,2sBA4BhBkC,EAAUhG,IAAO8D,IAAV,4aAcPmC,EAAajG,IAAOkE,IAAV,iPAiFDgC,EAtED,SAAC,GAAmC,IAAjC7B,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACjBpB,EAASD,EAAa,UAAtBC,KAQFiD,EAAe,WACjB,IAAK,IAAIxD,KAAKO,EACV,GAAImB,IAAenB,EAAKP,GAAGT,IACvB,OAAOgB,EAAKP,IAKlByD,EAAY,WACd,IAAIC,EAAMF,IACNE,IAAQnD,EAAK,GACboB,EAAcpB,EAAKA,EAAKH,OAAS,GAAGb,KAEpCoC,EAAcpB,EAAKA,EAAKoD,QAAQD,GAAO,GAAGnE,MAG5CqE,EAAY,WACd,IAAIF,EAAMF,IACNE,IAAQnD,EAAKA,EAAKH,OAAS,GAC3BuB,EAAcpB,EAAK,GAAGhB,KAEtBoC,EAAcpB,EAAKA,EAAKoD,QAAQD,GAAO,GAAGnE,MAkBlD,OAdAlB,qBAAW,WAEP,IAAMwF,EAAgB,SAAC9D,GACnB,OAAkB,KAAdA,EAAE+D,QACKL,IACc,KAAd1D,EAAE+D,QACFF,SADJ,GAKX,OADAG,OAAOC,iBAAiB,UAAWH,GAC5B,kBAAME,OAAOE,oBAAoB,UAAWJ,OAMnD,cADA,CACCT,EAAD,WACQ,cAACC,EAAD,CAAmBxB,GAAIC,IAAOX,IAE1Bd,UAAY,SACZ0B,QAnDI,SAAChC,GACbA,EAAEE,OAAOiE,UAAUC,SAAS,WAC5BxC,EAAc,OA8CV,SAIQ,cAAC,IAAD,CAAMtB,UAAU,OAAO+D,QAAS,CAAEC,IAAM,IAAxC,SACI,qBAAKhE,UAAU,aAAf,SACI,cAACiD,EAAD,CAAYzB,GAAIC,IAAOP,IAAKsB,IAAKnB,EAAYoB,IAAG,2BAAsBU,KACtET,QAAU,CAAEuB,OAAQ,IAAKC,MAAO,EAAGvB,QAAS,GAC5CC,QAAU,CAAEqB,OAAQ,IAAKC,MAAO,EAAGvB,QAAS,GAC5CE,WAAY,CAAEtD,KAAM,SAAU4E,UAAW,IAAKC,QAAS,WATzD,KAalB,cAAC,IAAD,CAAiBpE,UAAU,aAAa8B,KAAMuC,IAAuB3C,QAAS6B,IAC9E,cAAC,IAAD,CAAiBvD,UAAU,aAAa8B,KAAMwC,IAAsB5C,QAAS0B,Q,kBCnHnFmB,GAAQvH,IAAOwH,GAAV,mEAKLC,GAAOzH,IAAO8D,IAAV,ufAqBJ4D,GAAmB,CACvBC,UAAW,CACTC,OAAQ,CACNC,MAAO,IACPC,QAAS,CACPC,QAAQ,IAGZC,QAAS,CACPC,SAAU,GAEZC,KAAM,CACJL,MAAO,GACPM,QAAQ,GAEVxC,QAAS,CACPkC,MAAO,GAETO,KAAM,CACJC,UAAW,SACXC,SAAU,MACVC,QAAQ,GAEVC,YAAa,CACXT,QAAQ,KAsCCU,GAjCH,WAEV,MAAsClI,mBAAS,MAA/C,mBAAQ8D,EAAR,KAAoBC,EAApB,KAcA,OAIE,cAHA,CAGCmD,GAAD,WACE,cAAC,IAAD,CAAWzE,UAAU,YAAY0F,OAAQhB,KACzC,cAACH,GAAD,0BACA,cAAC,EAAD,IAEC,cAAC,EAAD,CAASjD,cAAeA,IAExBD,GAAc,cAAC,EAAD,CAAOA,WAAYA,EAAYC,cAAeA,QCjFpDqE,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5G,MAAK,YAAkD,IAA/C6G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,8BACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BX,O","file":"static/js/main.6cb135de.chunk.js","sourcesContent":["// import * as firebase from 'firebase/app';\r\nimport firebase from 'firebase';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyClV6hATGG1i4-F_nrDpafEdCWG2BXLpZc\",\r\n    authDomain: \"gallery4pen.firebaseapp.com\",\r\n    projectId: \"gallery4pen\",\r\n    storageBucket: \"gallery4pen.appspot.com\",\r\n    messagingSenderId: \"138354369327\",\r\n    appId: \"1:138354369327:web:795dfd394ad67c522eb7da\",\r\n    measurementId: \"G-0EXXM7KBXL\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n\r\n  const storage = firebase.storage();\r\n  const firestore = firebase.firestore();\r\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\n  export { storage, firestore, timestamp };","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components';\r\n// import ProgressBar from './ProgressBar';\r\n\r\nimport { storage, firestore, timestamp } from '../firebase/firebase_config';\r\n\r\nconst Form = styled.form `\r\n    text-align: center;\r\n    margin: 10px auto;\r\n`\r\nconst Input = styled.input `\r\n    height: 0;\r\n    width: 0;\r\n    opacity: 0;\r\n    `\r\nconst FormLabel = styled.label `\r\n    cursor: pointer;\r\n    display: block;\r\n    width: 100px;\r\n    /* height: 30px; */\r\n    border: 3px solid white;\r\n    border-radius: 12px;\r\n    margin: 10px auto;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n    &:hover {\r\n        background: #000;\r\n        color: hsl(210, 36%, 96%);\r\n    }\r\n`\r\n\r\nconst UploadForm = () => {\r\n    const [images, setImages] = useState([]);\r\n    const [ file, setFile ] = useState(null);     //setting initial states of file and newFile\r\n    const [ error, setError ] = useState(null);    //establishing errors, initially null state\r\n    const filetypes = ['image.png', 'image/jpeg', 'image/jpg'];   //user submitted filetypes can only be png/jpeg\r\n    const [ progress, setProgress ] = useState(0);\r\n    const [ url, setUrl ] = useState([]);\r\n\r\n    const picUpload = (e) => {\r\n        // let setImages = [];\r\n\r\n        for (let i = 0; i < e.target.files.length; i++) {\r\n            let images = e.target.files[i];\r\n            setImages((prevState) => [...prevState, images]);\r\n            \r\n            if (images && filetypes.includes(images.type)) {\r\n                setFile(images);        //updating setFile state to the user entered file\r\n                setError('');        //clears error if previously displayed\r\n            } else {                \r\n                setFile(null);      //if the image submitted does not match type, clear image selected\r\n                setError('Please use a png or jpeg image type.');   //and display an error message\r\n            }\r\n        }\r\n                    //if an image is submitted and the type (from file info) matches filetypes\r\n    }\r\n    \r\n    useEffect(() => {\r\n        // const promises = [];\r\n        images.map((image) => {\r\n\r\n            //create a reference in storage for each file\r\n            const storageRef = storage.ref(image.name).put(image);\r\n    \r\n            // promises.push(storageRef);\r\n    \r\n            //establish a collection/gallery for files\r\n            const collectionRef = firestore.collection('images');\r\n            //then input the file into the reference - once the state of the file changes (must wait for upload to finish)\r\n            storageRef.on('state_changed', (snapshot) => {\r\n                //as the file is uploaded, we are getting snapshots of upload progress - displayed as percentage\r\n                let percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                setProgress(percentage);    //progress will be percentage displayed\r\n            }, (err) => {\r\n                //third argument is the error message\r\n                setError(err);\r\n            }, async () => {\r\n                //pass file url and pass it to the storage reference\r\n                await storage\r\n                    .ref(image.name)\r\n                    .getDownloadURL()\r\n                //add the url above to the collection, along with timestamp\r\n                    .then((url) => {\r\n                        const desc = 'testing plop';\r\n                        const createdAt = timestamp();      //create timestamp variable\r\n                        collectionRef.add( { url, createdAt, desc })\r\n                         //set the referenced url to the established url var\r\n                        setUrl((prevState) => [...prevState, url])\r\n                    })\r\n            })      //function will process every time a file is submitted\r\n        // Promise.all(promises);\r\n        setImages([]);\r\n        })\r\n    }, [images])\r\n\r\n    return (\r\n        //form that accepts files from user to upload to gallery\r\n        <Form>\r\n            <FormLabel>\r\n                Add Photos\r\n                <Input type='file' multiple onChange={picUpload}/>\r\n            </FormLabel>\r\n            <div className='message'>\r\n                {/* {file && <div> {file.name} </div>}\r\n                {file && <ProgressBar file={file} setFile={setFile} />} */}\r\n                    {/* display filename with upload progress bar or error messages */}\r\n                {error && <div> {error} </div>}\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default UploadForm","import { useState, useEffect } from 'react';\r\nimport { firestore } from './firebase_config'\r\n\r\n// reusable hook to export files from collection into gallery\r\nconst useFirestore = (collection) => {\r\n    const [ docs, setDocs ] = useState([]); //initial state of docs will be an empty array\r\n    const unmount = useEffect(() => {\r\n        firestore.collection(collection)    //function to take a snapshot of the collection\r\n        .orderBy('createdAt', 'desc')   //order each file by the date it was uploaded, descending order\r\n        .onSnapshot((snapshot) => {     //takes snapshot\r\n            let documents = [];     //create an empty array that will update when files are added\r\n            snapshot.forEach(doc => {   //for each file in the collection\r\n                documents.push({...doc.data(), //we pull all data (spread) from the document and add it to the documents array\r\n                id: doc.id }) //also need to pull the doc id\r\n            })\r\n            setDocs(documents);     //after pushing the doc information to the array, need to update state of docs to include array\r\n        })\r\n        return () => unmount;     //cleanup function to unmount from unmounted components (to prevent further state updates)\r\n    }, [collection])    //use collection as the dependency\r\n    return { docs }\r\n}\r\n\r\nexport default useFirestore\r\n","import React, {useState} from 'react';\r\nimport useFirestore from '../firebase/firestore';\r\nimport { firestore } from '../firebase/firebase_config';\r\nimport { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimesCircle, faHeart } from '@fortawesome/free-regular-svg-icons';\r\n\r\nconst ImgGallery = styled.div `\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\nconst DeleteBtn = styled.a `\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 10px;\r\n    color: black;\r\n    display: none;\r\n    font-size: 24px;\r\n    opacity: 0.4;\r\n    transition: 200ms ease-in-out;\r\n    &:hover {\r\n        color: red;\r\n        cursor: pointer;\r\n        opacity: 1;\r\n    }\r\n`;\r\nconst FavBtn = styled.a `\r\n    position: absolute;\r\n    top: 5px;\r\n    left: 10px;\r\n    /* color: black; */\r\n    display: none;\r\n    font-size: 24px;\r\n    opacity: 0.4;\r\n    transition: 200ms ease-in-out;\r\n    &:hover {\r\n        color: purple;\r\n        cursor: pointer;\r\n        opacity: 1;\r\n    }\r\n`;\r\nconst ContainerImg = styled.img `\r\n    /* width: 600px;\r\n    height: auto; */\r\n    max-height: 100%;\r\n    min-width: 100%;\r\n    object-fit: cover;\r\n    vertical-align: bottom;\r\n    &:last-child {\r\n        flex-grow: 10;\r\n    }\r\n    &:hover {\r\n        cursor: pointer;\r\n        opacity: 1;\r\n        transition: transform 200ms ease-in-out;\r\n        transform: scale(1.05);\r\n        transform-origin: center;\r\n    }\r\n`;\r\nconst ImgContainer = styled.div `\r\n    /* display: flex;\r\n    justify-content: center;\r\n    width: 300px;\r\n    height: 300px;\r\n    line-height: 0;\r\n    column-gap: 0px; */\r\n    margin: .1vh .1vw;\r\n    position: relative;\r\n    height: 40vh;\r\n    width: auto;\r\n    flex-grow: 1;\r\n    overflow: hidden;\r\n    opacity: .85;\r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n    &:hover ${DeleteBtn} {\r\n        display: block;\r\n        z-index: 1;\r\n    } \r\n    &:hover ${FavBtn} {\r\n        display: block;\r\n        z-index: 1;\r\n    } \r\n`;\r\n\r\nconst Gallery = ( { currentImg, setCurrentImg }) => {       //insert setCurrentImg as prop (destructured) for modal functionality\r\n    const { docs } = useFirestore('images');    //the images uploaded will be passed through firestore hook for data collection\r\n    const [toggle, setToggle] = useState(false);\r\n\r\n    // const toggleFavorite = (e) => {\r\n    //     // console.log(e.target)\r\n    //     if (e.target.style.color === \"red\") {\r\n    //         e.target.style.color = \"black\"\r\n    //     } else {\r\n    //         e.target.style.color = \"red\";\r\n    //         e.target.style.opacity = \"1\";\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        //container wrapped around gallery containing array of uploaded images using the image urls - also use url for onClick for modal\r\n            // layout, initial, animate, transition are used for framer-motion animations\r\n        <ImgGallery>\r\n            { docs && docs.map(doc => (\r\n                <ImgContainer as={motion.div} \r\n                key={doc.id} \r\n                onClick={() => {\r\n                    setCurrentImg(doc.url)\r\n                }}\r\n                layout>\r\n                    <DeleteBtn onClick={(e) => {\r\n                        e.stopPropagation();        //stops modal from popping up when deleting image\r\n                        firestore.collection('images').doc(doc.id).delete();    //delete image\r\n                    }}>\r\n                        <FontAwesomeIcon icon={faTimesCircle}/>\r\n                    </DeleteBtn> \r\n                    <FavBtn onClick={(e) => {\r\n                        e.stopPropagation();        //stops modal from popping up when deleting image\r\n                        // toggleFavorite(e);\r\n                        if (doc.desc.includes(' fav')){\r\n                            doc.desc = doc.desc.replace(' fav', '')\r\n                            e.target.style.color = 'black'\r\n                        } else {\r\n                            doc.desc += ' fav'\r\n                            e.target.style.background = 'red'\r\n                            e.target.style.color = 'red'\r\n                        }\r\n                        console.log(doc.desc);\r\n                            //if image desciption includes fac, delete it, else add it\r\n                    }}\r\n                        toggle={setToggle}>\r\n                        <FontAwesomeIcon icon={faHeart}/>\r\n                    </FavBtn> \r\n                    <ContainerImg as={motion.img} src={doc.url} alt=\"has been uploaded by user\"\r\n                    initial={ { opacity: 0 } }\r\n                    animate={ { opacity: 1 } }\r\n                    transition={ { delay: 1 } }/>\r\n                </ImgContainer>\r\n            ))}\r\n        </ImgGallery>\r\n    )\r\n}\r\n\r\nexport default Gallery","import React, {useEffect} from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\nimport useFirestore from '../firebase/firestore';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowAltCircleLeft, faArrowAltCircleRight } from '@fortawesome/free-regular-svg-icons';\r\nimport Tilt from 'react-tilt';\r\n\r\nconst OverlayContainer = styled.div`\r\n    -moz-user-select: none;     //used to prevent picture highlighting blue when fast-clicking\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    z-index: 10;\r\n    & > .prev {\r\n        position: fixed;\r\n        top: 50vh;\r\n        right: 5vw;\r\n        font-size: 5vw;\r\n        color: hsl(0, 0%, 100%);\r\n        z-index: 10;\r\n        cursor: pointer;\r\n        /* user-select: none; */\r\n    }\r\n    & > .next {\r\n        position: fixed;\r\n        top: 50vh;\r\n        left: 5vw;\r\n        font-size: 5vw;\r\n        color: hsl(0, 0%, 100%);\r\n        z-index: 10;\r\n        cursor: pointer;\r\n        /* user-select: none; */\r\n    }\r\n    /* & > .target {} */\r\n`\r\nconst Overlay = styled.div `\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: hsla(0, 0%, 30%, 0.6);\r\n    -webkit-tap-highlight-color: transparent;\r\n    &.js-loading *,                 //need to work with this more\r\n    &.js-loading *:before,\r\n    &.js-loading *:after {\r\n        animation-play-state: paused !important;        //ensures animation plays in completion\r\n    }\r\n`\r\nconst OverlayImg = styled.img `\r\n    display: block;\r\n    max-width: 70%;\r\n    max-height: 70%;\r\n    margin: 20vh auto;\r\n    box-shadow: 3px 5px 7px hsla(0, 0%, 0%, 0.5);\r\n    border: 3px solid white;\r\n    /* border-bottom: 50px solid white; */\r\n`\r\n\r\n//modal to show full-size images\r\nconst Modal = ({ currentImg, setCurrentImg }) => {    //prop used to display correct selected image in modal\r\n    const { docs } = useFirestore('images');\r\n    \r\n    const handleClick = (e) => {        //create a function that allows user to close modal once opened\r\n        if (e.target.classList.contains('target')) {   //set to allow user to click on modal img\r\n            setCurrentImg(null);                        //modal will only close when user clicks outside of image\r\n        }\r\n    }\r\n\r\n    const currentIndex = () => {        //function to pull current index of picture selected for modal\r\n        for (let i in docs) {           //for all pictures in the 'images' collection\r\n            if (currentImg === docs[i].url ) {    //find the index associated with the url of currentImg\r\n                return docs[i]          //return index info\r\n            }\r\n        }\r\n    }\r\n    \r\n    const prevSlide = () => {           //previous slide button\r\n        let idx = currentIndex();       //pull index for current image\r\n        if (idx === docs[0]) {          //if the index matches the first docs index\r\n            setCurrentImg(docs[docs.length - 1].url)  //loop to last image in array on click\r\n        } else {\r\n            setCurrentImg(docs[docs.indexOf(idx) - 1].url)    //or subtract one position from index position\r\n        }\r\n    }\r\n    const nextSlide = () => {\r\n        let idx = currentIndex();\r\n        if (idx === docs[docs.length - 1]) {\r\n            setCurrentImg(docs[0].url)\r\n        } else {\r\n            setCurrentImg(docs[docs.indexOf(idx) + 1].url)\r\n        }\r\n    }\r\n\r\n    useEffect( () => {          \r\n            //allowing keypresses for cycling images\r\n        const handleKeyDown = (e) => {\r\n            if (e.keyCode === 37) {     //arrow left for previous image\r\n                return prevSlide()\r\n            } else if (e.keyCode === 39) {  //arrow right for next image\r\n                return nextSlide()\r\n            }\r\n        }\r\n        window.addEventListener('keydown', handleKeyDown);\r\n        return () => window.removeEventListener('keydown', handleKeyDown);\r\n    })\r\n\r\n\r\n    return (\r\n        //use handleClick to allow user to close image modal\r\n        <OverlayContainer >\r\n                <Overlay key={' '} as={motion.div} \r\n                    // className={index === current ? 'target active' : 'target not-active'} \r\n                    className={ 'target' } \r\n                    onClick={handleClick}>\r\n                        <Tilt className=\"Tilt\" options={{ max : 25 }} >\r\n                            <div className=\"Tilt-inner\">\r\n                                <OverlayImg as={motion.img} src={currentImg} alt={`front and center ${currentIndex()}`} \r\n                                initial={ { rotate: 180, scale: 0, opacity: 0 } } \r\n                                animate={ { rotate: 360, scale: 1, opacity: 1 } }\r\n                                transition={{ type: \"spring\", stiffness: 275, damping: 30 }} />\r\n                            </div>\r\n                        </Tilt>\r\n                </Overlay>\r\n            <FontAwesomeIcon className='prev arrow' icon={faArrowAltCircleRight} onClick={nextSlide} />\r\n            <FontAwesomeIcon className='next arrow' icon={faArrowAltCircleLeft} onClick={prevSlide} />\r\n        </OverlayContainer>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React, {useState} from 'react';\nimport UploadForm from './components/UploadForm';\n// import './App.css';\nimport Gallery from './components/Gallery';\nimport Modal from './components/Modal';\n// import Clock from './components/Clock';\nimport styled from 'styled-components';\n// import useFirestore from './firebase/firestore';\nimport Particles from 'react-particles-js';\nimport { faSmileBeam } from '@fortawesome/free-regular-svg-icons';\n\nconst Title = styled.h1 `\n  text-align: center;\n  color: white\n`\n\nconst Body = styled.div `\n  position: relative;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  /* font-family: 'Quicksand', sans-serif; */\n  font-size: 16px;\n  /* background-color: #C84551; */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-tap-highlight-color: transparent;   //used to prevent double-click highlighting\n  & > .particles {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: -1;\n  }\n`;\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 200,\n      density: {\n        enable: false\n      }\n    },\n    polygon: {\n      nb_sides: 5\n    },\n    size: {\n      value: 10,\n      random: true,\n    },\n    opacity: {\n      value: 1\n    },\n    move: {\n      direction: 'bottom',\n      out_mode: 'out',\n      bounce: false\n    },\n    line_linked: {\n      enable: false,\n    }\n  }\n}\n\nconst App = () => {\n  // const [ pics, searchfield ] = useState([]);\n  const [ currentImg, setCurrentImg ] = useState(null); //state for images as they enter modal\n  // const { docs } = useFirestore('images');\n\n  // const filterImages = () => {\n  //   const checkbox = document.getElementById('checkbox');\n  //   if (checkbox.checked === true) {\n  //     currentImg.filter((image) => {\n  //       image.desc.includes('fav')\n  //     });\n  //   } else {\n  //     setCurrentImg()\n  //   }\n  // }\n\n  return ( \n    // !pics.length ?\n    // <h1>Loading...</h1> :\n\n    <Body>\n      <Particles className=\"particles\" params={particlesOptions} />\n      <Title >Gallery4Pen</Title> \n      <UploadForm />\n      {/* <input type='checkbox' id='checkbox'>Favorite</input> */}\n      {<Gallery setCurrentImg={setCurrentImg} />}\n        {/* setCurrentImg used as prop for modal functionality */}\n      {currentImg && <Modal currentImg={currentImg} setCurrentImg={setCurrentImg} /> }\n        {/* image only renders when selected - currentImg and setCurrentImg used as props within Modal for click function */}\n    </Body>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}