{"version":3,"sources":["firebase/firebase_config.js","components/UploadForm.js","firebase/firestore.js","components/Gallery.js","components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","storage","firestore","timestamp","FieldValue","serverTimestamp","Form","styled","form","Input","input","FormLabel","label","UploadForm","useState","images","setImages","setFile","error","setError","filetypes","setProgress","setUrl","useEffect","map","image","storageRef","ref","name","put","collectionRef","collection","on","snapshot","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","then","url","createdAt","add","desc","prevState","type","multiple","onChange","e","i","target","files","console","log","size","includes","length","className","useFirestore","docs","setDocs","unmount","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImgGallery","div","DeleteBtn","FavBtn","ContainerImg","img","ImgContainer","Gallery","currentImg","setCurrentImg","setToggle","as","motion","onClick","layout","stopPropagation","delete","icon","faTimesCircle","replace","style","color","toggle","faHeart","src","alt","initial","opacity","animate","transition","delay","OverlayContainer","Overlay","OverlayImg","Modal","currentIndex","prevSlide","idx","indexOf","nextSlide","handleKeyDown","keyCode","window","addEventListener","removeEventListener","classList","contains","rotate","scale","stiffness","damping","faArrowAltCircleRight","faArrowAltCircleLeft","Title","h1","Body","particlesOptions","particles","number","value","density","enable","polygon","nb_sides","random","move","direction","out_mode","bounce","line_linked","App","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45b776b6.chunk.js","sourcesContent":["// import * as firebase from 'firebase/app';\r\nimport firebase from 'firebase';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyClV6hATGG1i4-F_nrDpafEdCWG2BXLpZc\",\r\n    authDomain: \"gallery4pen.firebaseapp.com\",\r\n    projectId: \"gallery4pen\",\r\n    storageBucket: \"gallery4pen.appspot.com\",\r\n    messagingSenderId: \"138354369327\",\r\n    appId: \"1:138354369327:web:795dfd394ad67c522eb7da\",\r\n    measurementId: \"G-0EXXM7KBXL\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n\r\n  const storage = firebase.storage();\r\n  const firestore = firebase.firestore();\r\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\n  export { storage, firestore, timestamp };","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components';\r\n// import ProgressBar from './ProgressBar';\r\n\r\nimport { storage, firestore, timestamp } from '../firebase/firebase_config';\r\n\r\nconst Form = styled.form `\r\n    text-align: center;\r\n    margin: 10px auto;\r\n    & > div {\r\n        font-weight: 600;\r\n    }\r\n`\r\nconst Input = styled.input `\r\n    height: 0;\r\n    width: 0;\r\n    opacity: 0;\r\n    `\r\nconst FormLabel = styled.label `\r\n    cursor: pointer;\r\n    display: block;\r\n    width: 100px;\r\n    /* height: 30px; */\r\n    border: 3px solid white;\r\n    border-radius: 12px;\r\n    margin: 10px auto;\r\n    color: white;\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n    &:hover {\r\n        background: #000;\r\n        color: hsl(210, 36%, 96%);\r\n    }\r\n`\r\n\r\nconst UploadForm = () => {\r\n    const [images, setImages] = useState([]);\r\n    const [ file, setFile ] = useState(null);     //setting initial states of file and newFile\r\n    const [ error, setError ] = useState(null);    //establishing errors, initially null state\r\n    const filetypes = ['image.png', 'image/jpeg', 'image/jpg'];   //user submitted filetypes can only be png/jpeg\r\n    const [ progress, setProgress ] = useState(0);\r\n    const [ url, setUrl ] = useState([]);\r\n\r\n    const picUpload = (e) => {\r\n        // let setImages = [];\r\n\r\n        for (let i = 0; i < e.target.files.length; i++) {\r\n            let images = e.target.files[i];\r\n            console.log(images.size);\r\n            if (images && filetypes.includes(images.type) && images.size < 1048577) {\r\n                setImages((prevState) => [...prevState, images]);\r\n                setFile(images);        //updating setFile state to the user entered file\r\n                setError('');        //clears error if previously displayed\r\n            } \r\n            else if (images.size > 1048576) {       //if image is more than 1MB\r\n                setFile(null);      //clear image selected \r\n                setError('WARNING: File size too large. Please select file 1MB or less.');   //and display an error message\r\n            } \r\n            else {                \r\n                setFile(null);      //clear image selected\r\n                setError('WARNING: Please use png, jpg, or jpeg image types.');   //and display an error message\r\n            }\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        // const promises = [];\r\n        images.map((image) => {\r\n\r\n            //create a reference in storage for each file\r\n            const storageRef = storage.ref(image.name).put(image);\r\n    \r\n            // promises.push(storageRef);\r\n    \r\n            //establish a collection/gallery for files\r\n            const collectionRef = firestore.collection('images');\r\n            //then input the file into the reference - once the state of the file changes (must wait for upload to finish)\r\n            storageRef.on('state_changed', (snapshot) => {\r\n                //as the file is uploaded, we are getting snapshots of upload progress - displayed as percentage\r\n                let percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n                setProgress(percentage);    //progress will be percentage displayed\r\n            }, (err) => {\r\n                //third argument is the error message\r\n                setError(err);\r\n            }, async () => {\r\n                //pass file url and pass it to the storage reference\r\n                await storage\r\n                    .ref(image.name)\r\n                    .getDownloadURL()\r\n                //add the url above to the collection, along with timestamp\r\n                    .then((url) => {\r\n                        const desc = 'testing pop';\r\n                        const createdAt = timestamp();      //create timestamp variable\r\n                        collectionRef.add( { url, createdAt, desc })\r\n                         //set the referenced url to the established url var\r\n                        setUrl((prevState) => [...prevState, url])\r\n                    })\r\n            })      //function will process every time a file is submitted\r\n        // Promise.all(promises);\r\n        setImages([]);\r\n        })\r\n    }, [images])\r\n\r\n    return (\r\n        //form that accepts files from user to upload to gallery\r\n        <Form>\r\n            <FormLabel>\r\n                Add Photos\r\n                <Input type='file' multiple onChange={picUpload}/>\r\n            </FormLabel>\r\n            <div className='message'>\r\n                {/* {file && <div> {file.name} </div>}\r\n                {file && <ProgressBar file={file} setFile={setFile} />} */}\r\n                    {/* display filename with upload progress bar or error messages */}\r\n                {error && <div> {error} </div>}\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default UploadForm","import { useState, useEffect } from 'react';\r\nimport { firestore } from './firebase_config'\r\n\r\n// reusable hook to export files from collection into gallery\r\nconst useFirestore = (collection) => {\r\n    const [ docs, setDocs ] = useState([]); //initial state of docs will be an empty array\r\n    const unmount = useEffect(() => {\r\n        firestore.collection(collection)    //function to take a snapshot of the collection\r\n        .orderBy('createdAt', 'desc')   //order each file by the date it was uploaded, descending order\r\n        .onSnapshot((snapshot) => {     //takes snapshot\r\n            let documents = [];     //create an empty array that will update when files are added\r\n            snapshot.forEach(doc => {   //for each file in the collection\r\n                documents.push({...doc.data(), //we pull all data (spread) from the document and add it to the documents array\r\n                id: doc.id }) //also need to pull the doc id\r\n            })\r\n            setDocs(documents);     //after pushing the doc information to the array, need to update state of docs to include array\r\n        })\r\n        return () => unmount;     //cleanup function to unmount from unmounted components (to prevent further state updates)\r\n    }, [collection])    //use collection as the dependency\r\n    return { docs }\r\n}\r\n\r\nexport default useFirestore\r\n","import React, {useState} from 'react';\r\nimport useFirestore from '../firebase/firestore';\r\nimport { firestore } from '../firebase/firebase_config';\r\nimport { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimesCircle, faHeart } from '@fortawesome/free-regular-svg-icons';\r\n\r\nconst ImgGallery = styled.div `\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\nconst DeleteBtn = styled.a `\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 10px;\r\n    color: black;\r\n    display: none;\r\n    font-size: 24px;\r\n    opacity: 0.4;\r\n    transition: 200ms ease-in-out;\r\n    &:hover {\r\n        color: red;\r\n        cursor: pointer;\r\n        opacity: 1;\r\n    }\r\n`;\r\nconst FavBtn = styled.a `\r\n    position: absolute;\r\n    top: 5px;\r\n    left: 10px;\r\n    /* color: black; */\r\n    display: none;\r\n    font-size: 24px;\r\n    opacity: 0.4;\r\n    transition: 200ms ease-in-out;\r\n    &:hover {\r\n        color: purple;\r\n        cursor: pointer;\r\n        opacity: 1;\r\n    }\r\n`;\r\nconst ContainerImg = styled.img `\r\n    /* width: 600px;\r\n    height: auto; */\r\n    max-height: 100%;\r\n    min-width: 100%;\r\n    object-fit: cover;\r\n    vertical-align: bottom;\r\n    &:last-child {\r\n        flex-grow: 10;\r\n    }\r\n    &:hover {\r\n        cursor: pointer;\r\n        opacity: 1;\r\n        transition: transform 200ms ease-in-out;\r\n        transform: scale(1.05);\r\n        transform-origin: center;\r\n    }\r\n`;\r\nconst ImgContainer = styled.div `\r\n    /* display: flex;\r\n    justify-content: center;\r\n    width: 300px;\r\n    height: 300px;\r\n    line-height: 0;\r\n    column-gap: 0px; */\r\n    margin: .1vh .1vw;\r\n    position: relative;\r\n    height: 40vh;\r\n    width: auto;\r\n    flex-grow: 1;\r\n    overflow: hidden;\r\n    opacity: .85;\r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n    &:hover ${DeleteBtn} {\r\n        display: block;\r\n        z-index: 1;\r\n    } \r\n    &:hover ${FavBtn} {\r\n        display: block;\r\n        z-index: 1;\r\n    } \r\n`;\r\n\r\nconst Gallery = ( { currentImg, setCurrentImg }) => {       //insert setCurrentImg as prop (destructured) for modal functionality\r\n    const { docs } = useFirestore('images');    //the images uploaded will be passed through firestore hook for data collection\r\n    const [toggle, setToggle] = useState(false);\r\n\r\n    // const toggleFavorite = (e) => {\r\n    //     // console.log(e.target)\r\n    //     if (e.target.style.color === \"red\") {\r\n    //         e.target.style.color = \"black\"\r\n    //     } else {\r\n    //         e.target.style.color = \"red\";\r\n    //         e.target.style.opacity = \"1\";\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        //container wrapped around gallery containing array of uploaded images using the image urls - also use url for onClick for modal\r\n            // layout, initial, animate, transition are used for framer-motion animations\r\n        <ImgGallery>\r\n            { docs && docs.map(doc => (\r\n                <ImgContainer as={motion.div} \r\n                key={doc.id} \r\n                onClick={() => {\r\n                    setCurrentImg(doc.url)\r\n                }}\r\n                layout>\r\n                    <DeleteBtn onClick={(e) => {\r\n                        e.stopPropagation();        //stops modal from popping up when deleting image\r\n                        firestore.collection('images').doc(doc.id).delete();    //delete image\r\n                    }}>\r\n                        <FontAwesomeIcon icon={faTimesCircle}/>\r\n                    </DeleteBtn> \r\n                    <FavBtn onClick={(e) => {\r\n                        e.stopPropagation();        //stops modal from popping up when deleting image\r\n                        // toggleFavorite(e);\r\n                        if (doc.desc.includes(' fav')){\r\n                            doc.desc = doc.desc.replace(' fav', '')\r\n                            e.target.style.color = 'black'\r\n                        } else {\r\n                            doc.desc += ' fav'\r\n                            e.target.style.color = 'red'\r\n                        }\r\n                        console.log(doc.desc);\r\n                    }}\r\n                        toggle={setToggle}>\r\n                        <FontAwesomeIcon icon={faHeart}/>\r\n                    </FavBtn> \r\n                    <ContainerImg as={motion.img} src={doc.url} alt=\"has been uploaded by user\"\r\n                    initial={ { opacity: 0 } }\r\n                    animate={ { opacity: 1 } }\r\n                    transition={ { delay: 1 } }/>\r\n                </ImgContainer>\r\n            ))}\r\n        </ImgGallery>\r\n    )\r\n}\r\n\r\nexport default Gallery","import React, {useEffect} from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\nimport useFirestore from '../firebase/firestore';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowAltCircleLeft, faArrowAltCircleRight } from '@fortawesome/free-regular-svg-icons';\r\nimport Tilt from 'react-tilt';\r\n\r\nconst OverlayContainer = styled.div`\r\n    -moz-user-select: none;     //used to prevent picture highlighting blue when fast-clicking\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    z-index: 10;\r\n    & > .prev {\r\n        position: fixed;\r\n        top: 50vh;\r\n        right: 5vw;\r\n        font-size: 5vw;\r\n        color: hsl(0, 0%, 100%);\r\n        z-index: 10;\r\n        cursor: pointer;\r\n        /* user-select: none; */\r\n    }\r\n    & > .next {\r\n        position: fixed;\r\n        top: 50vh;\r\n        left: 5vw;\r\n        font-size: 5vw;\r\n        color: hsl(0, 0%, 100%);\r\n        z-index: 10;\r\n        cursor: pointer;\r\n        /* user-select: none; */\r\n    }\r\n    /* & > .target {} */\r\n`\r\nconst Overlay = styled.div `\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: hsla(0, 0%, 30%, 0.6);\r\n    -webkit-tap-highlight-color: transparent;\r\n    &.js-loading *,                 //need to work with this more\r\n    &.js-loading *:before,\r\n    &.js-loading *:after {\r\n        animation-play-state: paused !important;        //ensures animation plays in completion\r\n    }\r\n`\r\nconst OverlayImg = styled.img `\r\n    display: block;\r\n    max-width: 70%;\r\n    max-height: 70%;\r\n    margin: 20vh auto;\r\n    box-shadow: 3px 5px 7px hsla(0, 0%, 0%, 0.5);\r\n    border: 3px solid white;\r\n    /* border-bottom: 50px solid white; */\r\n`\r\n\r\n//modal to show full-size images\r\nconst Modal = ({ currentImg, setCurrentImg }) => {    //prop used to display correct selected image in modal\r\n    const { docs } = useFirestore('images');\r\n    \r\n    const handleClick = (e) => {        //create a function that allows user to close modal once opened\r\n        if (e.target.classList.contains('target')) {   //set to allow user to click on modal img\r\n            setCurrentImg(null);                        //modal will only close when user clicks outside of image\r\n        }\r\n    }\r\n\r\n    const currentIndex = () => {        //function to pull current index of picture selected for modal\r\n        for (let i in docs) {           //for all pictures in the 'images' collection\r\n            if (currentImg === docs[i].url ) {    //find the index associated with the url of currentImg\r\n                return docs[i]          //return index info\r\n            }\r\n        }\r\n    }\r\n    \r\n    const prevSlide = () => {           //previous slide button\r\n        let idx = currentIndex();       //pull index for current image\r\n        if (idx === docs[0]) {          //if the index matches the first docs index\r\n            setCurrentImg(docs[docs.length - 1].url)  //loop to last image in array on click\r\n        } else {\r\n            setCurrentImg(docs[docs.indexOf(idx) - 1].url)    //or subtract one position from index position\r\n        }\r\n    }\r\n    const nextSlide = () => {\r\n        let idx = currentIndex();\r\n        if (idx === docs[docs.length - 1]) {\r\n            setCurrentImg(docs[0].url)\r\n        } else {\r\n            setCurrentImg(docs[docs.indexOf(idx) + 1].url)\r\n        }\r\n    }\r\n\r\n    useEffect( () => {          \r\n            //allowing keypresses for cycling images\r\n        const handleKeyDown = (e) => {\r\n            if (e.keyCode === 37) {     //arrow left for previous image\r\n                return prevSlide()\r\n            } else if (e.keyCode === 39) {  //arrow right for next image\r\n                return nextSlide()\r\n            }\r\n        }\r\n        window.addEventListener('keydown', handleKeyDown);\r\n        return () => window.removeEventListener('keydown', handleKeyDown);\r\n    })\r\n\r\n\r\n    return (\r\n        //use handleClick to allow user to close image modal\r\n        <OverlayContainer >\r\n                <Overlay key={' '} as={motion.div} \r\n                    // className={index === current ? 'target active' : 'target not-active'} \r\n                    className={ 'target' } \r\n                    onClick={handleClick}>\r\n                        {/* <Tilt className=\"Tilt\" options={{ max : 15 }} > */}\r\n                            {/* <div className=\"Tilt-inner\"> */}\r\n                                <OverlayImg as={motion.img} src={currentImg} alt={`front and center ${currentIndex()}`} \r\n                                initial={ { rotate: 180, scale: 0, opacity: 0 } } \r\n                                animate={ { rotate: 360, scale: 1, opacity: 1 } }\r\n                                transition={{ type: \"spring\", stiffness: 275, damping: 30 }} />\r\n                            {/* </div> */}\r\n                        {/* </Tilt> */}\r\n                </Overlay>\r\n            <FontAwesomeIcon className='prev arrow' icon={faArrowAltCircleRight} onClick={nextSlide} />\r\n            <FontAwesomeIcon className='next arrow' icon={faArrowAltCircleLeft} onClick={prevSlide} />\r\n        </OverlayContainer>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React, {useState} from 'react';\r\nimport UploadForm from './components/UploadForm';\r\nimport Gallery from './components/Gallery';\r\nimport Modal from './components/Modal';\r\nimport styled from 'styled-components';\r\nimport Particles from 'react-particles-js';\r\n\r\nconst Title = styled.h1 `\r\n  text-align: center;\r\n  color: white\r\n`\r\n\r\nconst Body = styled.div `\r\n  position: relative;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  /* font-family: 'Quicksand', sans-serif; */\r\n  font-size: 16px;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  -webkit-tap-highlight-color: transparent;   //used to prevent double-click highlighting\r\n  & > .particles {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\nconst particlesOptions = {\r\n  particles: {\r\n    number: {\r\n      value: 200,\r\n      density: {\r\n        enable: false\r\n      }\r\n    },\r\n    polygon: {\r\n      nb_sides: 5\r\n    },\r\n    size: {\r\n      value: 10,\r\n      random: true,\r\n    },\r\n    opacity: {\r\n      value: 1\r\n    },\r\n    move: {\r\n      direction: 'bottom',\r\n      out_mode: 'out',\r\n      bounce: false\r\n    },\r\n    line_linked: {\r\n      enable: false,\r\n    }\r\n  }\r\n}\r\n\r\nconst App = () => {\r\n  // const [ pics, searchfield ] = useState([]);\r\n  const [ currentImg, setCurrentImg ] = useState(null); //state for images as they enter modal\r\n  // const { docs } = useFirestore('images');\r\n\r\n  // const filterImages = () => {\r\n  //   const checkbox = document.getElementById('checkbox');\r\n  //   if (checkbox.checked === true) {\r\n  //     currentImg.filter((image) => {\r\n  //       image.desc.includes('fav')\r\n  //     });\r\n  //   } else {\r\n  //     setCurrentImg()\r\n  //   }\r\n  // }\r\n\r\n  return ( \r\n    // !pics.length ?\r\n    // <h1>Loading...</h1> :\r\n\r\n    <Body>\r\n      <Particles className=\"particles\" params={particlesOptions} />\r\n      <Title >Gallery4Pen</Title> \r\n      <UploadForm />\r\n      {/* <input type='checkbox' id='checkbox'>Favorite</input> */}\r\n      {<Gallery setCurrentImg={setCurrentImg} />}\r\n        {/* setCurrentImg used as prop for modal functionality */}\r\n      {currentImg && <Modal currentImg={currentImg} setCurrentImg={setCurrentImg} /> }\r\n        {/* image only renders when selected - currentImg and setCurrentImg used as props within Modal for click function */}\r\n    </Body>\r\n  )\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint.\r\nreportWebVitals();"],"sourceRoot":""}